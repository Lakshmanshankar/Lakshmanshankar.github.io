---
import Layout from "@/layouts/Layout.astro";
import { render } from "astro:content";
import { getCollection, getEntry, type CollectionEntry } from "astro:content";
import Toc from "@/components/toc.astro";
import BackToTop from "@/components/ui/BackToTop.astro";
import BackToPrev from "@/components/ui/BackToPrev.astro";
import { readingTime } from "@/lib/utils";
import FormattedDate from "@/components/ui/FormattedDate.astro";
import { Schema } from "astro-seo-schema";

import { SITE } from "@/consts";
export async function getStaticPaths() {
    const posts = await getCollection("blog");
    return posts.map((post: { id: any }) => ({
        params: { slug: post.id },
        props: { post },
    }));
}
interface Props {
    post: CollectionEntry<"blog">;
}
const { post } = Astro.props;
const entry = await getEntry("blog", post.id);

if (!entry) {
    return new Response("Not Found", {
        status: 404,
        statusText: "Not Found",
    });
}
const { Content, headings } = await render(entry);
const url = SITE + Astro.url.pathname;
---

<Layout title={entry.data.title} description={entry.data.description}>
    <head>
        <Schema
            item={{
                "@context": "https://schema.org",
                "@type": "BlogPosting",
                mainEntityOfPage: {
                    "@type": "WebPage",
                    "@id": `${import.meta.env.SITE}/blog/${post.id}`,
                },
                headline: entry.data.title,
                description: entry.data.description,
                datePublished: entry.data.date.toISOString(),
                dateModified: entry.data.date.toISOString(),
                author: {
                    "@type": "Person",
                    name: "Lakshmanshankar",
                },
                url: url,
            }}
        />
    </head>
    <div class="flex gap-2 flex-col text-sm">
        <BackToPrev href="/blog">Back to Blog</BackToPrev>
        <div class="my-2 text-sm">
            <FormattedDate date={entry.data.date} includeYear />
            <span class="text-black dark:text-amber-500">â€¢</span>
            <span>{entry.body && readingTime(entry.body)}</span>
        </div>
    </div>
    <Toc headings={headings} />
    <article class="animate">
        <h1 class="mt-10">{entry.data.title}</h1>
        {
            entry.data.image && (
                <img
                    src={entry.data.image}
                    alt={entry.data.title}
                    class="w-full h-auto rounded-md"
                />
            )
        }
        <Content />
        <BackToTop />
    </article>
</Layout>

<script>
    function throttle(func: () => void, delay: number) {
        let timeoutId: any;
        let lastExecTime = 0;

        return () => {
            const now = Date.now();

            if (now - lastExecTime > delay) {
                func();
                lastExecTime = now;
            } else {
                clearTimeout(timeoutId);
                timeoutId = setTimeout(
                    () => {
                        func();
                        lastExecTime = Date.now();
                    },
                    delay - (now - lastExecTime),
                );
            }
        };
    }

    function highlightTocActiveItem() {
        const headers = document.querySelectorAll("h1, h2, h3");
        const tocLinks = document.querySelectorAll(".toc-link");

        // Find first visible header
        const activeHeader = Array.from(headers).find((header) => {
            const rect = header.getBoundingClientRect();
            return rect.top >= 0 && rect.top <= 200;
        });

        if (!activeHeader || activeHeader.id === "table-of-contents") return;

        tocLinks.forEach((link) => {
            const isActive =
                link instanceof HTMLAnchorElement && link.dataset.targetId === activeHeader.id;

            link.classList.toggle("toc-active", isActive);
            link.setAttribute("data-toc-status", isActive ? "active" : "");

            if (isActive && window.innerWidth > 768) {
                link.scrollIntoView({ behavior: "smooth", block: "nearest" });
            }
        });
    }

    const throttledHighlight = throttle(highlightTocActiveItem, 200);

    function setupTocScroll() {
        window.removeEventListener("scroll", throttledHighlight);
        window.addEventListener("scroll", throttledHighlight);
        highlightTocActiveItem();
    }

    // Initialize
    document.addEventListener("astro:after-swap", setupTocScroll);
    document.addEventListener("DOMContentLoaded", setupTocScroll);
    setupTocScroll();
</script>
